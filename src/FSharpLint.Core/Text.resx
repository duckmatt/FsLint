<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConsoleCouldNotFindFile" xml:space="preserve">
    <value>Could not find the project file: {0} on disk.</value>
  </data>
  <data name="ConsoleFailedToLoadConfig" xml:space="preserve">
    <value>{0}</value>
  </data>
  <data name="ConsoleFailedToParseFile" xml:space="preserve">
    <value>Failed to parse file {0}</value>
  </data>
  <data name="ConsoleFailedToResolveReferences" xml:space="preserve">
    <value>Failed to resolve references.</value>
  </data>
  <data name="ConsoleFinished" xml:space="preserve">
    <value>Finished.</value>
  </data>
  <data name="ConsoleHelp" xml:space="preserve">
    <value>Use -f followed by the absolute path of the .fsproj file of the project to lint to run the tool.</value>
  </data>
  <data name="ConsoleMSBuildFailedToLoadProjectFile" xml:space="preserve">
    <value>MSBuild could not load the project file {0} because: {1}</value>
  </data>
  <data name="ConsoleProjectFileCouldNotBeFound" xml:space="preserve">
    <value>{0} could not be found on disk.</value>
  </data>
  <data name="ConsoleRunTimeConfigError" xml:space="preserve">
    <value>Failed while reading from config at run time.</value>
  </data>
  <data name="LintError" xml:space="preserve">
    <value>Error in file {0} on line {1} starting at column {2}</value>
  </data>
  <data name="FailwithfWithArgumentsMatchingFormatString" xml:space="preserve">
    <value>`failwithf` has more arguments than were found in its format string, these further arguments will be ignored by the compiler.</value>
  </data>
  <data name="FailwithWithSingleArgument" xml:space="preserve">
    <value>`failwith` should have a single argument, further arguments will be ignored by the compiler.</value>
  </data>
  <data name="FavourIgnoreOverLetWild" xml:space="preserve">
    <value>The `ignore` function is usually favoured over `let _ = ...` when ignoring the result of an expression.</value>
  </data>
  <data name="ReimplementsFunction" xml:space="preserve">
    <value>If `{0}` has no mutable arguments partially applied then the lambda can be removed.</value>
  </data>
  <data name="RulesHintRefactor" xml:space="preserve">
    <value>`{0}` might be able to be refactored into `{1}`.</value>
  </data>
  <data name="RulesHintSuggestion" xml:space="preserve">
    <value>`{0}`; suggestion: {1}.</value>
  </data>
  <data name="RulesNamingConventionsCamelCaseError" xml:space="preserve">
    <value>Expected a camel case identifier, found `{0}`.</value>
  </data>
  <data name="RulesNamingConventionsExceptionError" xml:space="preserve">
    <value>Exception identifier expected to end with 'Exception', found `{0}`.</value>
  </data>
  <data name="RulesNamingConventionsInterfaceError" xml:space="preserve">
    <value>Interface identifiers expected to begin with the letter I, found interface `{0}`.</value>
  </data>
  <data name="RulesNamingConventionsPascalCaseError" xml:space="preserve">
    <value>Expected a pascal case identifier, found `{0}`.</value>
  </data>
  <data name="RulesNamingConventionsUnderscoreError" xml:space="preserve">
    <value>Identifiers expected to not contain underscores, an underscore was found in: `{0}`.</value>
  </data>
  <data name="NestedStatements" xml:space="preserve">
    <value>Code expected not to be nested more deeply than a depth of {0}.</value>
  </data>
  <data name="MaxNumberOfBooleanOperatorsInCondition" xml:space="preserve">
    <value>Conditions expected to contain at most {0} boolean operators.</value>
  </data>
  <data name="MaxNumberOfMembers" xml:space="preserve">
    <value>Type expected to have a maximum of {0} members.</value>
  </data>
  <data name="MaxNumberOfFunctionParameters" xml:space="preserve">
    <value>Functions expected to have a maximum of {0} parameters.</value>
  </data>
  <data name="MaxNumberOfItemsInTuple" xml:space="preserve">
    <value>Tuple expected to have a maximum of {0} items.</value>
  </data>
  <data name="RaiseWithSingleArgument" xml:space="preserve">
    <value>`raise` should have a single argument, further arguments will be ignored by the compiler.</value>
  </data>
  <data name="SourceLength" xml:space="preserve">
    <value>{0} was {2} lines long, expected to be less than {1} lines long.</value>
  </data>
  <data name="RulesTypographyFileLengthError" xml:space="preserve">
    <value>File expected to be less than {0} lines long.</value>
  </data>
  <data name="RulesTypographyLineLengthError" xml:space="preserve">
    <value>Line expected to be less than {0} characters long.</value>
  </data>
  <data name="RulesTypographyTabCharacterError" xml:space="preserve">
    <value>Found tab character (`\t`) in file.</value>
  </data>
  <data name="RulesTypographyTrailingLineError" xml:space="preserve">
    <value>Found trailing whitespace line at end of file.</value>
  </data>
  <data name="RulesTypographyTrailingWhitespaceError" xml:space="preserve">
    <value>Found trailing whitespace at end of line.</value>
  </data>
  <data name="UselessBinding" xml:space="preserve">
    <value>Binding appears to have no purpose.</value>
  </data>
  <data name="WildcardNamedWithAsPattern" xml:space="preserve">
    <value>Unnecessary wildcard named using the as pattern, the wildcard can be removed e.g. `_ as x` can simply be `x`.</value>
  </data>
  <data name="RulesXmlDocumentationExceptionError" xml:space="preserve">
    <value>Expected exception type to have xml documentation.</value>
  </data>
  <data name="InvalidArgWithTwoArguments" xml:space="preserve">
    <value>`invalidArg` should have two arguments, further arguments will be ignored by the compiler.</value>
  </data>
  <data name="InvalidOpWithSingleArgument" xml:space="preserve">
    <value>`invalidOp` should have a single argument, further arguments will be ignored by the compiler.</value>
  </data>
  <data name="NullArgWithSingleArgument" xml:space="preserve">
    <value>`nullArg` should have a single argument, further arguments will be ignored by the compiler.</value>
  </data>
  <data name="TupleOfWildcards" xml:space="preserve">
    <value>A pattern that is a tuple consisting of entirely wildcards can be replaced with a single wildcard. `{0}` can be replaced with `{1}`.</value>
  </data>
  <data name="LintSourceError" xml:space="preserve">
    <value>Error on line {0} starting at column {1}</value>
  </data>
  <data name="CanBeReplacedWithComposition" xml:space="preserve">
    <value>If no mutable arguments are partially applied in the chain of function calls, then the function calls and lambda could be replaced with composition. e.g. `fun x -&gt; x |&gt; isValid |&gt; not` could be replaced with `isValid &gt;&gt; not`.</value>
  </data>
  <data name="RulesXmlDocumentationTypeError" xml:space="preserve">
    <value>Expected type to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationMemberError" xml:space="preserve">
    <value>Expected member to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationModuleError" xml:space="preserve">
    <value>Expected module to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationEnumError" xml:space="preserve">
    <value>Expected enum `{0}` to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationUnionError" xml:space="preserve">
    <value>Expected union case `{0}` to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationRecordError" xml:space="preserve">
    <value>Expected record case `{0}` to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationAutoPropertyError" xml:space="preserve">
    <value>Expected auto property `{0}` to have xml documentation.</value>
  </data>
  <data name="RulesXmlDocumentationLetError" xml:space="preserve">
    <value>Expected let to have xml documentation.</value>
  </data>
</root>