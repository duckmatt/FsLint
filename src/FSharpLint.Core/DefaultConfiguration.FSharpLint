<?xml version="1.0" encoding="utf-8"?>
<FSharpLintSettings xmlns="https://github.com/fsprojects/FSharpLint/blob/master/ConfigurationSchema.xsd">
  <IgnoreFiles>
    <![CDATA[
      assemblyinfo.*
    ]]>
  </IgnoreFiles>

  <UseTypeChecker>false</UseTypeChecker>

  <Analysers>
    <Hints>
      <Hints>
        <![CDATA[
          not (a =  b) ===> a <> b
          not (a <> b) ===> a =  b
          not (a >  b) ===> a <= b
          not (a >= b) ===> a <  b
          not (a <  b) ===> a >= b
          not (a <= b) ===> a >  b
          compare x y <> 1 ===> x <= y
          compare x y = -1 ===> x < y
          compare x y <> -1 ===> x >= y
          compare x y = 1 ===> x > y
          compare x y <= 0 ===> x <= y
          compare x y <  0 ===> x <  y
          compare x y >= 0 ===> x >= y
          compare x y >  0 ===> x >  y
          compare x y =  0 ===> x =  y
          compare x y <> 0 ===> x <> y

          List.head (List.sort x) ===> List.min x
          List.head (List.sortBy f x) ===> List.minBy f x

          List.map f (List.map g x) ===> List.map (g >> f) x
          Array.map f (Array.map g x) ===> Array.map (g >> f) x
          Seq.map f (Seq.map g x) ===> Seq.map (g >> f) x
          List.nth x 0 ===> List.head x
          List.map f (List.replicate n x) ===> List.replicate n (f x)
          List.rev (List.rev x) ===> x
          Array.rev (Array.rev x) ===> x
          List.fold (@) [] x ===> List.concat x
          List.map id x ===> id x
          Array.map id x ===> id x
          Seq.map id x ===> id x
          (List.length x) = 0 ===> List.isEmpty x
          (Array.length x) = 0 ===> Array.isEmpty x
          (Seq.length x) = 0 ===> Seq.isEmpty x
          x = [] ===> List.isEmpty x
          x = [||] ===> Array.isEmpty x
          (List.length x) <> 0 ===> not (List.isEmpty x)
          (Array.length x) <> 0 ===> not (Array.isEmpty x)
          (Seq.length x) <> 0 ===> not (Seq.isEmpty x)
          (List.length x) > 0 ===> not (List.isEmpty x)
          (Array.length x) <> 0 ===> not (Array.isEmpty x)
          (Seq.length x) <> 0 ===> not (Seq.isEmpty x)

          List.concat (List.map f x) ===> List.collect f x
          Array.concat (Array.map f x) ===> Array.collect f x
          Seq.concat (Seq.map f x) ===> Seq.collect f x

          List.isEmpty (List.filter f x) ===> not (List.exists f x)
          Array.isEmpty (Array.filter f x) ===> not (Array.exists f x)
          Seq.isEmpty (Seq.filter f x) ===> not (Seq.exists f x)
          not (List.isEmpty (List.filter f x)) ===> List.exists f x
          not (Array.isEmpty (Array.filter f x)) ===> Array.exists f x
          not (Seq.isEmpty (Seq.filter f x)) ===> Seq.exists f x

          List.length x >= 0 ===> true
          Array.length x >= 0 ===> true
          Seq.length x >= 0 ===> true

          x = true ===> x
          x = false ===> not x
          true = a ===> a
          false = a ===> not a
          a <> true ===> not a
          a <> false ===> a
          true <> a ===> not a
          false <> a ===> a
          if a then true else false ===> a
          if a then false else true ===> not a
          not (not x) ===> x

          (fst x, snd x) ===> x

          true && x ===> x
          false && x ===> false
          true || x ===> true
          false || x ===> x
          not true ===> false
          not false ===> true
          fst (x, y) ===> x
          snd (x, y) ===> y
          List.fold f x [] ===> x
          Array.fold f x [||] ===> x
          List.foldBack f [] x ===> x
          Array.foldBack f [||] x ===> x
          x - 0 ===> x
          x * 1 ===> x
          x / 1 ===> x

          List.fold (+) 0 x ===> List.sum x
          Array.fold (+) 0 x ===> Array.sum x
          Seq.fold (+) 0 x ===> Seq.sum x
          List.sum (List.map x y) ===> List.sumBy x y
          Array.sum (Array.map x y) ===> Array.sumBy x y
          Seq.sum (Seq.map x y) ===> Seq.sumBy x y
          List.average (List.map x y) ===> List.averageBy x y
          Array.average (Array.map x y) ===> Array.averageBy x y
          Seq.average (Seq.map x y) ===> Seq.averageBy x y
          List.concat (List.map x y) ===> List.collect x y
          Array.concat (Array.map x y) ===> Array.collect x y
          Seq.concat (Seq.map x y) ===> Seq.collect x y

          List.empty ===> []
          Array.empty ===> [||]

          x::[] ===> [x]
          pattern: x::[] ===> [x]

          x @ [] ===> x

          List.isEmpty [] ===> true
          Array.isEmpty [||] ===> true

          fun _ -> () ===> ignore
          fun x -> x ===> id
          id x ===> x
          id >> f ===> f
          f >> id ===> f

          x = null ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
          null = x ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
          x <> null ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"
          null <> x ===> m"Consider using pattern matching, or if you're using F# 4 then `isNull`"

          Array.append a (Array.append b c) ===> Array.concat [|a; b; c|]
        ]]>
      </Hints>
      <Enabled>true</Enabled>
    </Hints>

    <NameConventions>
      <Rules>

        <InterfaceNames>
          <Enabled>true</Enabled>
          <Prefix>I</Prefix>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </InterfaceNames>

        <ExceptionNames>
          <Enabled>true</Enabled>
          <Suffix>Exception</Suffix>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </ExceptionNames>

        <TypeNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </TypeNames>

        <RecordFieldNames>
          <Enabled>false</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </RecordFieldNames>

        <EnumCasesNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </EnumCasesNames>

        <UnionCasesNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </UnionCasesNames>

        <ModuleNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </ModuleNames>

        <LiteralNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </LiteralNames>

        <NamespaceNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </NamespaceNames>

        <MemberNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>AllowPrefix</Underscores>
        </MemberNames>

        <ParameterNames>
          <Enabled>true</Enabled>
          <Naming>CamelCase</Naming>
          <Underscores>AllowPrefix</Underscores>
        </ParameterNames>

        <MeasureTypeNames>
          <Enabled>true</Enabled>
          <Underscores>None</Underscores>
        </MeasureTypeNames>

        <ActivePatternNames>
          <Enabled>true</Enabled>
          <Naming>PascalCase</Naming>
          <Underscores>None</Underscores>
        </ActivePatternNames>

        <PublicValuesNames>
          <Enabled>true</Enabled>
          <Underscores>AllowPrefix</Underscores>
        </PublicValuesNames>

        <NonPublicValuesNames>
          <Enabled>true</Enabled>
          <Naming>CamelCase</Naming>
          <Underscores>AllowPrefix</Underscores>
        </NonPublicValuesNames>

      </Rules>
      <Enabled>true</Enabled>
    </NameConventions>

    <SourceLength>
      <Rules>
        <MaxLinesInFunction>
          <Enabled>true</Enabled>
          <Lines>100</Lines>
        </MaxLinesInFunction>

        <MaxLinesInLambdaFunction>
          <Enabled>true</Enabled>
          <Lines>7</Lines>
        </MaxLinesInLambdaFunction>

        <MaxLinesInMatchLambdaFunction>
          <Enabled>true</Enabled>
          <Lines>100</Lines>
        </MaxLinesInMatchLambdaFunction>

        <MaxLinesInValue>
          <Enabled>true</Enabled>
          <Lines>100</Lines>
        </MaxLinesInValue>

        <MaxLinesInConstructor>
          <Enabled>true</Enabled>
          <Lines>100</Lines>
        </MaxLinesInConstructor>

        <MaxLinesInMember>
          <Enabled>true</Enabled>
          <Lines>100</Lines>
        </MaxLinesInMember>

        <MaxLinesInProperty>
          <Enabled>true</Enabled>
          <Lines>70</Lines>
        </MaxLinesInProperty>

        <MaxLinesInClass>
          <Enabled>true</Enabled>
          <Lines>500</Lines>
        </MaxLinesInClass>

        <MaxLinesInEnum>
          <Enabled>true</Enabled>
          <Lines>500</Lines>
        </MaxLinesInEnum>

        <MaxLinesInUnion>
          <Enabled>true</Enabled>
          <Lines>500</Lines>
        </MaxLinesInUnion>

        <MaxLinesInRecord>
          <Enabled>true</Enabled>
          <Lines>500</Lines>
        </MaxLinesInRecord>

        <MaxLinesInModule>
          <Enabled>true</Enabled>
          <Lines>1000</Lines>
        </MaxLinesInModule>
      </Rules>
      <Enabled>false</Enabled>
    </SourceLength>

    <Typography>
      <Rules>
        <MaxLinesInFile>
          <Enabled>false</Enabled>
          <Lines>1000</Lines>
        </MaxLinesInFile>

        <MaxCharactersOnLine>
          <Enabled>false</Enabled>
          <Length>120</Length>
        </MaxCharactersOnLine>

        <NoTabCharacters>
          <Enabled>true</Enabled>
        </NoTabCharacters>

        <TrailingNewLineInFile>
          <Enabled>false</Enabled>
        </TrailingNewLineInFile>

        <TrailingWhitespaceOnLine>
          <Enabled>false</Enabled>
          <NumberOfSpacesAllowed>1</NumberOfSpacesAllowed>
          <OneSpaceAllowedAfterOperator>true</OneSpaceAllowedAfterOperator>
          <IgnoreBlankLines>true</IgnoreBlankLines>
        </TrailingWhitespaceOnLine>
      </Rules>
      <Enabled>true</Enabled>
    </Typography>

    <NestedStatements>
      <Enabled>false</Enabled>
      <Depth>8</Depth>
    </NestedStatements>

    <NumberOfItems>
      <Rules>
        <MaxNumberOfFunctionParameters>
          <Enabled>true</Enabled>
          <MaxItems>5</MaxItems>
        </MaxNumberOfFunctionParameters>

        <MaxNumberOfMembers>
          <Enabled>true</Enabled>
          <MaxItems>32</MaxItems>
        </MaxNumberOfMembers>

        <MaxNumberOfItemsInTuple>
          <Enabled>true</Enabled>
          <MaxItems>4</MaxItems>
        </MaxNumberOfItemsInTuple>

        <MaxNumberOfBooleanOperatorsInCondition>
          <Enabled>true</Enabled>
          <MaxItems>4</MaxItems>
        </MaxNumberOfBooleanOperatorsInCondition>
      </Rules>
      <Enabled>false</Enabled>
    </NumberOfItems>

    <RaiseWithTooManyArguments>
      <Rules>
        <FailwithWithSingleArgument>
          <Enabled>true</Enabled>
        </FailwithWithSingleArgument>

        <RaiseWithSingleArgument>
          <Enabled>true</Enabled>
        </RaiseWithSingleArgument>

        <NullArgWithSingleArgument>
          <Enabled>true</Enabled>
        </NullArgWithSingleArgument>

        <InvalidOpWithSingleArgument>
          <Enabled>true</Enabled>
        </InvalidOpWithSingleArgument>

        <FailwithfWithArgumentsMatchingFormatString>
          <Enabled>true</Enabled>
        </FailwithfWithArgumentsMatchingFormatString>

        <InvalidArgWithTwoArguments>
          <Enabled>true</Enabled>
        </InvalidArgWithTwoArguments>
      </Rules>
      <Enabled>true</Enabled>
    </RaiseWithTooManyArguments>

    <Binding>
      <Rules>
        <FavourIgnoreOverLetWild>
          <Enabled>true</Enabled>
        </FavourIgnoreOverLetWild>

        <UselessBinding>
          <Enabled>true</Enabled>
        </UselessBinding>

        <TupleOfWildcards>
          <Enabled>true</Enabled>
        </TupleOfWildcards>

        <WildcardNamedWithAsPattern>
          <Enabled>true</Enabled>
        </WildcardNamedWithAsPattern>
      </Rules>
      <Enabled>true</Enabled>
    </Binding>

    <FunctionReimplementation>
      <Rules>
        <ReimplementsFunction>
          <Enabled>true</Enabled>
        </ReimplementsFunction>

        <CanBeReplacedWithComposition>
          <Enabled>true</Enabled>
        </CanBeReplacedWithComposition>
      </Rules>
      <Enabled>true</Enabled>
    </FunctionReimplementation>

    <XmlDocumentation>
      <Rules>
        <ModuleDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </ModuleDefinitionHeader>
        <ExceptionDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </ExceptionDefinitionHeader>
        <TypeDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </TypeDefinitionHeader>
        <MemberDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </MemberDefinitionHeader>
        <EnumDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </EnumDefinitionHeader>
        <UnionDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </UnionDefinitionHeader>
        <RecordDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </RecordDefinitionHeader>
        <AutoPropertyDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </AutoPropertyDefinitionHeader>
        <LetDefinitionHeader>
          <Access>None</Access>
          <Enabled>false</Enabled>
        </LetDefinitionHeader>
      </Rules>
      <Enabled>false</Enabled>
    </XmlDocumentation>
  </Analysers>
</FSharpLintSettings>
